{"version":3,"sources":["components/Banner.js","components/Search.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["className","useState","users","data","setData","filtered","setFiltered","ascend","setAscend","useEffect","axios","get","then","modData","results","map","user","date","dob","split","name","first","last","email","phone","image","picture","thumbnail","handleSort","type","sorted","sort","a","b","placeholder","onChange","e","val","target","value","toLowerCase","filter","includes","scope","onClick","class","key","src","alt","App","Banner","Search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAEe,G,MAAA,WACX,OACI,oCACA,yBAAKA,UAAU,aACX,6CACA,kEACA,gG,wBCLG,aAAK,IAAD,EACSC,mBAAS,CAACC,MAAM,KADzB,mBACRC,EADQ,KACFC,EADE,OAEiBH,mBAAS,CAACC,MAAM,KAFjC,mBAERG,EAFQ,KAEEC,EAFF,OAGaL,oBAAS,GAHtB,mBAGRM,EAHQ,KAGAC,EAHA,KAKfC,qBAAU,WCLHC,IAAMC,IAAI,gDDMPC,MAAK,SAAAT,GACP,IAAMU,EAAUV,EAAKA,KAAKW,QAAQC,KAAI,SAAAC,GAClC,IAAMC,EAAOD,EAAKE,IAAID,KAAKE,MAAM,KACjC,MAAQ,CACJC,KAAK,GAAD,OAAKJ,EAAKI,KAAKC,MAAf,YAAwBL,EAAKI,KAAKE,MACtCC,MAAOP,EAAKO,MACZC,MAAOR,EAAKQ,MACZN,IAAI,GAAD,OAAKD,EAAK,GAAV,YAAgBA,EAAK,GAAGE,MAAM,KAAK,GAAnC,YAAyCF,EAAK,IACjDQ,MAAOT,EAAKU,QAAQC,cAG5BrB,EAAY,CAACJ,MAAMW,IAAUT,EAAQ,CAACF,MAAMW,SAClD,IAEF,IAIMe,EAAa,SAACC,GAChB,IAAMC,EAASvB,EAASF,EAASH,MAAM6B,MAAK,SAACC,EAAEC,GAAH,OACxCD,EAAEH,GAAQI,EAAEJ,GAAQ,EAAIG,EAAEH,GAAQI,EAAEJ,IAAS,EAAI,KACjDxB,EAASH,MAAM6B,MAAK,SAACC,EAAEC,GAAH,OACxBD,EAAEH,GAAQI,EAAEJ,GAAQ,EAAIG,EAAEH,GAAQI,EAAEJ,IAAS,EAAI,KAEjDrB,GAAWD,GACXD,EAAY,CAACJ,MAAM4B,KAGvB,OACI,oCACA,2BAAOI,YAAY,iBAAiBlC,UAAU,cAAcmC,SAAU,SAACC,GAhBtD,IAACC,IAgBuED,EAAEE,OAAOC,MAAMC,cAfxGlC,EAAY,CAACJ,MAAMC,EAAKD,MAAMuC,QAAO,SAAAzB,GAAI,OAAGA,EAAKI,KAAKoB,cAAcE,SAASL,IAAMrB,EAAKO,MAAMmB,SAASL,IAAMrB,EAAKQ,MAAMkB,SAASL,WAgBjI,2BAAOrC,UAAU,uBACb,+BACI,4BACA,wBAAI2C,MAAM,MAAM3C,UAAU,QAC1B,wBAAI4C,QAAS,kBAAKhB,EAAW,SAAQe,MAAM,OAAM,uBAAGE,MAAM,wBAA1D,QACA,wBAAID,QAAS,kBAAKhB,EAAW,UAASe,MAAM,OAAM,uBAAGE,MAAM,wBAA3D,SACA,wBAAID,QAAS,kBAAKhB,EAAW,UAASe,MAAM,OAAM,uBAAGE,MAAM,wBAA3D,SACA,wBAAID,QAAS,kBAAKhB,EAAW,QAAOe,MAAM,OAAM,uBAAGE,MAAM,wBAAzD,cAGJ,+BACKxC,EAASH,MAAMa,KAAI,SAAAC,GAAI,OACpB,wBAAI8B,IAAK9B,EAAKE,KACd,4BAAI,yBAAK6B,IAAO/B,EAAKS,MAAOuB,IAAI,UAChC,4BAAKhC,EAAKI,MACV,4BAAKJ,EAAKO,OACV,4BAAKP,EAAKQ,OACV,4BAAKR,EAAKE,aE5Cf+B,MATf,WACE,OACE,yBAAKjD,UAAU,OACb,kBAACkD,EAAD,MACA,kBAACC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7080901.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default ()=>{\r\n    return(\r\n        <>\r\n        <div className=\"jumbotron\">\r\n            <h1>Our Employees</h1>\r\n            <h4>Welcome to our Employee Directory!</h4>\r\n            <h6>To find someone, simply start typing in the search bar below</h6>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport API from \"../utils/API\";\r\n\r\nexport default ()=>{\r\n    const [data, setData] = useState({users:[]});\r\n    const [filtered, setFiltered] = useState({users:[]});\r\n    const [ascend, setAscend] = useState(true);\r\n\r\n    useEffect(()=>{\r\n        API().then(data=>{\r\n            const modData = data.data.results.map(user=>{\r\n                const date = user.dob.date.split('-')\r\n                return ({\r\n                    name: `${user.name.first} ${user.name.last}`,\r\n                    email: user.email,\r\n                    phone: user.phone,\r\n                    dob: `${date[1]}/${date[2].split('T')[0]}/${date[0]}`,\r\n                    image: user.picture.thumbnail\r\n                })\r\n            })\r\n            setFiltered({users:modData});setData({users:modData})})\r\n    },[])\r\n\r\n    const handleSearch = (val)=>{\r\n        setFiltered({users:data.users.filter(user=> user.name.toLowerCase().includes(val)||user.email.includes(val)||user.phone.includes(val))})\r\n    }\r\n    \r\n    const handleSort = (type) => {\r\n        const sorted = ascend ? filtered.users.sort((a,b)=>\r\n            a[type] > b[type] ? 1 : a[type] < b[type] ? -1 : 0      \r\n        ) : filtered.users.sort((a,b)=>\r\n        a[type] < b[type] ? 1 : a[type] > b[type] ? -1 : 0      \r\n    )\r\n        setAscend(!ascend)\r\n        setFiltered({users:sorted})\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <input placeholder=\"Type to search\" className=\"text-center\" onChange={(e)=>{handleSearch(e.target.value.toLowerCase())}}/>\r\n        <table className=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                <th scope=\"col\" className=\"img\"></th>\r\n                <th onClick={()=> handleSort('name')}scope=\"col\"><i class=\"fas fa-arrows-alt-v\"></i>Name</th>\r\n                <th onClick={()=> handleSort('email')}scope=\"col\"><i class=\"fas fa-arrows-alt-v\"></i>Email</th>\r\n                <th onClick={()=> handleSort('phone')}scope=\"col\"><i class=\"fas fa-arrows-alt-v\"></i>Phone</th>\r\n                <th onClick={()=> handleSort('dob')}scope=\"col\"><i class=\"fas fa-arrows-alt-v\"></i>Birthday</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {filtered.users.map(user=>\r\n                    <tr key={user.dob}>\r\n                    <td><img src = {user.image} alt=\"user\"/></td>\r\n                    <td>{user.name}</td>\r\n                    <td>{user.email}</td>\r\n                    <td>{user.phone}</td>\r\n                    <td>{user.dob}</td>\r\n                </tr>\r\n                    )}\r\n            </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nexport default ()=>{\r\n    return axios.get(\"https://randomuser.me/api/?results=20&nat=us\")\r\n}","import React from 'react';\nimport Banner from './components/Banner';\nimport Search from './components/Search';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}